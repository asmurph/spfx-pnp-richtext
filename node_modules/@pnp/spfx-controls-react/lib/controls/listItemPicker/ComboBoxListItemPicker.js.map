{"version":3,"sources":["controls/listItemPicker/ComboBoxListItemPicker.tsx"],"names":[],"mappings":"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","file":"controls/listItemPicker/ComboBoxListItemPicker.js","sourcesContent":["import * as strings from 'ControlStrings';\nimport * as React from \"react\";\nimport { Label } from \"office-ui-fabric-react/lib/Label\";\nimport { IComboBoxListItemPickerProps, IComboBoxListItemPickerState } from \".\";\nimport * as telemetry from '../../common/telemetry';\nimport { ComboBox, IComboBoxOption } from \"office-ui-fabric-react/lib/ComboBox\";\nimport { ListItemRepository } from '../../common/dal/ListItemRepository';\n\n\nexport class ComboBoxListItemPicker extends React.Component<IComboBoxListItemPickerProps, IComboBoxListItemPickerState> {\n  private _listItemRepo: ListItemRepository;\n  public selectedItems: any[];\n\n  constructor(props: IComboBoxListItemPickerProps) {\n    super(props);\n\n    telemetry.track('ComboBoxListItemPicker', {});\n\n    // States\n    this.state = {\n      noresultsFoundText: !this.props.noResultsFoundText ? strings.genericNoResultsFoundText : this.props.noResultsFoundText,\n      showError: false,\n      errorMessage: \"\",\n      suggestionsHeaderText: !this.props.suggestionsHeaderText ? strings.ListItemPickerSelectValue : this.props.suggestionsHeaderText\n    };\n\n    // Get SPService Factory\n    this._listItemRepo = new ListItemRepository(this.props.webUrl, this.props.spHttpClient);\n\n    this.selectedItems = [];\n  }\n\n  public componentDidMount(): void {\n    this.loadOptions();\n  }\n\n  protected async loadOptions(): Promise<void> {\n    let query = \"\";\n    query += this.props.filter || \"Id gt 0\";\n    let keyColumnName = this.props.keyColumnInternalName || \"Id\";\n    let listItems = await this._listItemRepo.getListItemsByFilterClause(query,\n      this.props.listId,\n      this.props.columnInternalName,\n      this.props.keyColumnInternalName,\n      this.props.webUrl,\n      /*this.props.itemLimit ||*/ 100);\n\n    let options = listItems.map(option => {\n      return {\n        key: option[keyColumnName],\n        text: option[this.props.columnInternalName || \"Id\"]\n      };\n    });\n    if (this.props.defaultSelectedItems) {\n      //if passed only ids\n      if (!isNaN(this.props.defaultSelectedItems[0])) {\n        this.selectedItems = options.filter(opt => this.props.defaultSelectedItems.indexOf(opt.key) >= 0);\n      }\n      else {\n        this.selectedItems = options.filter(opt => this.props.defaultSelectedItems.map(selected => selected[keyColumnName]).indexOf(opt.key) >= 0);\n      }\n    }\n    this.setState({\n      availableOptions: options\n    });\n    if(this.props.onInitialized){\n      this.props.onInitialized();\n    }\n  }\n\n  public componentDidUpdate(prevProps: IComboBoxListItemPickerProps, prevState: IComboBoxListItemPickerState): void {\n    if (this.props.listId !== prevProps.listId) {\n      this.selectedItems = [];\n    }\n  }\n\n  /**\n   * Render the field\n   */\n  public render(): React.ReactElement<IComboBoxListItemPickerProps> {\n    const { className, disabled } = this.props;\n\n    return (this.state.availableOptions ? (\n      <div>\n        <ComboBox options={this.state.availableOptions}\n                  autoComplete={this.props.autoComplete}\n                  comboBoxOptionStyles={this.props.comboBoxOptionStyles}\n                  allowFreeform={this.props.allowFreeform}\n                  keytipProps={this.props.keytipProps}\n                  onMenuDismissed={this.props.onMenuDismiss}\n                  onMenuOpen={this.props.onMenuOpen}\n                  text={this.props.text}\n                  onChanged={this.onChanged}\n                  multiSelect={this.props.multiSelect}\n                  defaultSelectedKey={this.selectedItems.map(item=>item.key) || []}\n                  className={className}\n                  disabled={disabled} />\n\n        <Label style={{ color: '#FF0000' }}> {this.state.errorMessage} </Label>\n      </div>) : <span>Loading...</span>\n    );\n  }\n\n  /**\n   * On Selected Item\n   */\n  private onChanged = (option?: IComboBoxOption, index?: number, value?: string, submitPendingValueEvent?: any): void => {\n    if (option && option.selected) {\n      this.selectedItems.push({\n        [this.props.keyColumnInternalName || \"Id\"]: option.key,\n        [this.props.columnInternalName]: option.text,\n        selected: option.selected\n      });\n    } else {\n      this.selectedItems = this.selectedItems.filter(o => o[this.props.keyColumnInternalName || \"Id\"] !== option.key);\n    }\n    this.props.onSelectedItem(this.selectedItems.map(item => ({\n      [this.props.keyColumnInternalName || \"Id\"]: item.key,\n      [this.props.columnInternalName]: item.text\n    })));\n  }\n}\n"],"sourceRoot":"../../../src"}