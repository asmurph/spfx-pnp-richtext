{"version":3,"sources":["controls/carousel/ICarouselProps.ts"],"names":[],"mappings":";;AAEA;;GAEG;AACH,IAAY,uBAIX;AAJD,WAAY,uBAAuB;IACjC,mEAAO,CAAA;IACP,yEAAM,CAAA;IACN,yEAAM,CAAA;AACR,CAAC,EAJW,uBAAuB,GAAvB,+BAAuB,KAAvB,+BAAuB,QAIlC;AACD;;GAEG;AACH,IAAY,sBAaX;AAbD,WAAY,sBAAsB;IAChC;;OAEG;IACH,qEAAS,CAAA;IACT;;OAEG;IACH,iFAAW,CAAA;IACX;;OAEG;IACH,uEAAM,CAAA;AACR,CAAC,EAbW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAajC","file":"controls/carousel/ICarouselProps.js","sourcesContent":["import { ICssInput } from \"@uifabric/utilities/lib\";\n\n/**\n * Provides options for carousel buttons location.\n */\nexport enum CarouselButtonsLocation {\n  top = 1,\n  center,\n  bottom\n}\n/**\n * Provides options for carousel buttons display mode.\n */\nexport enum CarouselButtonsDisplay {\n  /**\n   * Reserves space for buttons on both sides of the control.\n   */\n  block = 1,\n  /**\n   * Only icon buttons are displayed.\n   */\n  buttonsOnly,\n  /**\n   * Buttons are not displayed. They appear onhover event.\n   */\n  hidden\n}\n\nexport interface ICarouselProps {\n  /**\n   * Specifies the initial index of the element to be displayed.\n   */\n  startIndex?: number;\n  /**\n   * Indicates if infinite scrolling is enabled.\n   */\n  isInfinite?: boolean;\n  /**\n   * Property indicates if the next item button can be clicked. If not provided, status of the button is calculated based on the current index.\n   * It is mandatory when triggerPageEvent is used.\n   */\n  canMoveNext?: boolean;\n  /**\n   * Property indicates if the previous item button can be clicked. If not provided, status of the button is calculated based on the current index.\n   * It is mandatory when triggerPageEvent is used.\n   */\n  canMovePrev?: boolean;\n\n  /**\n   * Specifies the location of the buttons inside the container.\n   */\n  buttonsLocation: CarouselButtonsLocation;\n  /**\n   * Specifies the buttons container display mode.\n   */\n  buttonsDisplay: CarouselButtonsDisplay;\n\n  /**\n   * Allows to specify own styles for carousel container.\n   */\n  containerStyles?: ICssInput;\n  /**\n   * Allows to specify own styles for loading component.\n   */\n  loadingComponentContainerStyles?: ICssInput;\n  /**\n   * Allows to specify own styles for elements container.\n   */\n  contentContainerStyles?: ICssInput;\n  /**\n   * Allows to specify own styles for buttons container.\n   */\n  containerButtonsStyles?: ICssInput;\n  /**\n   * Allows to specify own styles for previous item button.\n   */\n  prevButtonStyles?: ICssInput;\n  /**\n   * Allows to specify own styles for next item button.\n   */\n  nextButtonStyles?: ICssInput;\n\n  /**\n   * Name of the icon to be used for PreviousItem button. Default 'ChevronLeft'.\n   */\n  prevButtonIconName?: string;\n  /**\n   * Name of the icon to be used for NextItem button. Default 'ChevronRight'.\n   */\n  nextButtonIconName?: string;\n  /**\n   * Triggers parent control to provide new element to be displayed. After the method is executed, carousel control switches to processing mode and loadingComponent is displayed.\n   */\n  triggerPageEvent? : (index: number) => void;\n  /**\n   * Fixed array of elemenets to be displayed in carousel - if triggerPageEvent is not used.\n   * In case triggerPageEvent is in use, JSX.Element has to be provided. Elements are distinguished based on the 'key' property.\n   */\n  element: JSX.Element | JSX.Element[];\n  /**\n   * Allows to inject custom component when the carousel is in processing state. If not provided, Spinner is displayed.\n   */\n  loadingComponent?: JSX.Element;\n\n  /**\n   * Callback function called after the next item button is clicked. Not used when triggerPageEvent is specified.\n   */\n  onMoveNextClicked?: (currentIndex: number) => void;\n  /**\n   * Callback function called after the previous item button is clicked. Not used when triggerPageEvent is specified.\n   */\n  onMovePrevClicked?: (currentIndex: number) => void;\n\n}\n"],"sourceRoot":"../../../src"}